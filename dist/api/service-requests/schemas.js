"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTreatmentDtoSchema = exports.createTreatmentDtoSchema = exports.createMariageRequestDtoSchema = exports.createPartenariatRequestDtoSchema = exports.createRdvRequestDtoSchema = void 0;
// Auto-generated validation schemas
const zod_1 = require("zod");
const schemas_1 = require("../shared/schemas");
exports.createRdvRequestDtoSchema = zod_1.z.object({
    nom: zod_1.z.string(),
    prenom: zod_1.z.string(),
    email: zod_1.z.string(),
    telephone: zod_1.z.string(),
    profession: zod_1.z.string(),
    institution: zod_1.z.string(),
    nationalId: zod_1.z.string(),
    meetingTarget: zod_1.z.string(),
    otherMeetingTarget: zod_1.z.string().optional().nullable(),
    subject: zod_1.z.string(),
    otherSubject: zod_1.z.string().optional().nullable(),
    preferredSlot1: zod_1.z.string(),
    preferredSlot2: zod_1.z.string(),
    preferredSlot3: zod_1.z.string(),
    meetingType: zod_1.z.string(),
    certifyAccuracy: zod_1.z.boolean(),
    authorizeContact: zod_1.z.boolean(),
});
exports.createPartenariatRequestDtoSchema = zod_1.z.object({
    nom: zod_1.z.string(),
    prenom: zod_1.z.string(),
    email: zod_1.z.string(),
    organizationName: zod_1.z.string(),
    organizationType: zod_1.z.string(),
    otherOrganizationType: zod_1.z.string().optional().nullable(),
    activitySector: zod_1.z.string(),
    otherActivitySector: zod_1.z.string().optional().nullable(),
    originCountry: zod_1.z.string(),
    originCity: zod_1.z.string(),
    creationYear: zod_1.z.number(),
    website: zod_1.z.string().optional().nullable(),
    contactName: zod_1.z.string(),
    contactFunction: zod_1.z.string(),
    contactPhone: zod_1.z.string(),
    contactEmail: zod_1.z.string(),
    partnershipNature: zod_1.z.string(),
    otherPartnershipNature: zod_1.z.string().optional().nullable(),
    concernedService: zod_1.z.string(),
    proposalDescription: zod_1.z.string(),
    mairieObjectives: zod_1.z.string(),
    structureObjectives: zod_1.z.string(),
    partnershipDuration: zod_1.z.string(),
    startDate: zod_1.z.string(),
    certifyAccuracy: zod_1.z.boolean(),
    authorizeContact: zod_1.z.boolean(),
    acknowledgeNoValidation: zod_1.z.boolean(),
});
exports.createMariageRequestDtoSchema = zod_1.z.object({
    conjoint1: schemas_1.conjointDtoSchema,
    conjoint2: schemas_1.conjointDtoSchema,
    marriageType: zod_1.z.string(),
    guestEstimate: zod_1.z.number(),
    celebrationLanguage: zod_1.z.string(),
    otherCelebrationLanguage: zod_1.z.string().optional().nullable(),
    date1: zod_1.z.string(),
    time1: zod_1.z.string(),
    date2: zod_1.z.string(),
    time2: zod_1.z.string(),
    date3: zod_1.z.string(),
    time3: zod_1.z.string(),
    reserveRoom: zod_1.z.boolean(),
    roomType: zod_1.z.string().optional().nullable(),
    photoSpace: zod_1.z.boolean(),
    onlinePayment: zod_1.z.boolean(),
    certifyAccuracy: zod_1.z.boolean(),
    authorizeContact: zod_1.z.boolean(),
});
exports.createTreatmentDtoSchema = zod_1.z.object({
    demandeId: zod_1.z.string(),
    agentNom: zod_1.z.string(),
    agentPrenom: zod_1.z.string(),
    agentEmail: zod_1.z.string(),
    agentService: zod_1.z.string().optional().nullable(),
    commentairesInternes: zod_1.z.string().optional().nullable(),
    messageAgent: zod_1.z.string().optional().nullable(),
    dateEcheance: zod_1.z.string().optional().nullable(),
    notifyByEmail: zod_1.z.boolean().optional().nullable(),
    documentsRequis: zod_1.z.array(zod_1.z.string()).optional().nullable(),
    tempsEstime: zod_1.z.number().optional().nullable(),
});
exports.updateTreatmentDtoSchema = zod_1.z.object({
    etat: zod_1.z.string().optional().nullable(),
    resultat: zod_1.z.string().optional().nullable(),
    etapeWorkflow: zod_1.z.string().optional().nullable(),
    commentairesInternes: zod_1.z.string().optional().nullable(),
    commentairesPublics: zod_1.z.string().optional().nullable(),
    messageAgent: zod_1.z.string().optional().nullable(),
    dateEcheance: zod_1.z.string().optional().nullable(),
    notifyByEmail: zod_1.z.boolean().optional().nullable(),
    notifyBySms: zod_1.z.boolean().optional().nullable(),
    documentsRequis: zod_1.z.array(zod_1.z.string()).optional().nullable(),
    tempsEstime: zod_1.z.number().optional().nullable(),
});
//# sourceMappingURL=schemas.js.map